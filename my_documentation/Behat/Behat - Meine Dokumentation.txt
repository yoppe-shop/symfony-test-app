Szenario: Describe it in Gherkin

Feature: News admin panel
In order to maintain a list of News
As a site administrator
I need to be able to edit News

Scenario: Add new article
Given I am on the "/admin/news" page
When I click "New Article"
And I fill in "Title" with "Learned BDD"
And I press "Save"
Then I should see "A new article was added"

================================================

Behat: Maps each step to PHP Callback

The instrument which calls PHP callback functions 
for each step.

(Installation via Composer (nicht empfehlenswert):
php composer.phar require --dev behat/behat)

oder in der composer.json (Symfony 3.2 ist installiert):

  "psr-4": { "Tests\\": "tests/" }
    },
    "require": {
        "php": ">=5.5.9",
        "symfony/symfony": "3.2.*",
        "doctrine/orm": "^2.5",
        "doctrine/doctrine-bundle": "^1.6",
        "doctrine/doctrine-cache-bundle": "^1.2",
        "symfony/swiftmailer-bundle": "^2.3",
        "symfony/monolog-bundle": "^3.0",
        "symfony/polyfill-apcu": "^1.0",
        "phpunit/phpunit": ">5.6",
        "sensio/distribution-bundle": "^5.0",
        "sensio/framework-extra-bundle": "^3.0.2",
        "incenteev/composer-parameter-handler": "^2.0",
        "behat/behat": "~3.0",
        "behat/mink": "^1.7",
        "behat/mink-extension" : "^2.2",
        "behat/mink-goutte-driver": "^1.2",
        "behat/mink-selenium2-driver": "^1.3",
        "behat/mink-browserkit-driver": "^1.3"
    },

        "behat/mink-extension": "dev-master",
Ausführen im Symfony-Ordner:
php composer.phar update

Im Root-Verzeichnis des Projekts (z.B. symfony) die behat.yml konfigurieren:

#behat.yml
default:
  #autoload:
    #'' : %paths.base%/features/bootstrap
  extensions:
    Behat\MinkExtension:
      goutte:
        guzzle_parameters:
          verify: false
      selenium2:
        wd_host: 127.0.0.1:4444/wd/hub
        capabilities: { "browserName": "chrome", "browser": "chrome", "version":  "55", 'chrome': {'switches':['--no-sandbox']}}
      javascript_session: selenium2
      #the base url
      base_url: https://en.wikipedia.org
  suites:
    default:
      paths: [ %paths.base%/features ]
      bootstrap: [ $paths.features/bootstrap ]
      contexts:
        - FeatureContext
        - Behat\MinkExtension\Context\MinkContext

Diese Datei wird mit "vendor/bin/behat --config behat.yml" eingebunden.

Die Base-Url wird dann benutzt, wenn man z.B. für den Seitenaufruf
/admin oder ähnlich benutzt.

Aufruf des behat-Befehls aus dem Symfony-Ordner:
vendor/bin/behat --help / --init usw.

vendor/bin/behat -dl  listet die definierten Funktionen auf, z.B. die aus der 
Mink-Library.

Wenn sie auf Deutsch angezeigt werden, liegt das an der Systemvariable 
LANG. Diese Variablen lassen sich mit "set" in der Konsole aufrufen. Wenn man mit 
"unset LANG" diese Variable für diese Konsolen-Session löscht, werden die Funktionen 
auf Englisch angezeigt. Behat wird ohnehin mit den englischen Funktionen ausgeführt.

Gherkin-Beispiel in der features/wikipedia.feature:

# features/wikipedia.feature
Feature: search
  In order to see a word definition
  As a website user
  I need to be able to search for a word
  
  @javascript
  Scenario: Searching for a page that does exist
    Given I am on "/wiki/Main_Page"
    When I fill in "search" with "Behavior Driv"
    Then I should see "Behavior Driven Development"

  Scenario: Searching for a page that does exist
    Given I am on "/wiki/Main_Page"
    When I fill in "search" with "Behavior Driven Development"
    And I press "searchButton"
    Then I should see "agile software development"

Beispiel für die features/bootstrap/FeatureContext.php: Die Mink-Funktionen müssen 
nicht mehr gemappt werden, sondern die übrigen Feature-Texte:

<?php

use Behat\MinkExtension\Context\RawMinkContext;

/**
 * Behat context class.
 */
class FeatureContext extends RawMinkContext
{
    public function doSomething()
    {
        $session = $this->getSession();
        $session->visit('https://en.wikipedia.org');
    }

    /**
     * @Given I have a file named :file
     */
    public function iHaveAFileNamed($file)
    {
       touch($file);
    }
    /**
     * @Given I have a directory named :dir
     */
    public function iHaveADirectoryNamed($dir)
    {
        mkdir($dir);
    }
    /**
     * @When I run :command
     */
    public function iRun($command)
    {
        exec($command, $output);
        $this->output = trim(implode("\n", $output));
    }

    /**
     * @Then I should see :string in the output
     */
    public function iShouldSeeInTheOutput($string)
    {
        if (strpos($this->output, $string) === false) {
            throw new \Exception('Did not see' . $string);
        }
    }
}

Aufruf des Tests:

Alle Tests nacheinander automatisch ausgeführt:
vendor/bin/behat
Test einzeln aufgerufen:
vendor/bin/behat [features/wikipedia.feature]

Behat-Version:
vendor/bin/behat -V 

