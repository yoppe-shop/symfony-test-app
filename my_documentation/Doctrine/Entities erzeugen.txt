DOCTRINE - Entities herstellen:

1. Oder Doctrine soll die kompletten Entities herstellen:

Dazu in der Datei app/config/config.yml im Abschnitt doctrine: / dbal: eine Whitelist der 
DB-Tabellen eintragen, die Doctrine fehlerfrei umwandeln kann (BITTE keine Tabs verwenden!!!):

doctrine:
    dbal:
        driver:   pdo_mysql
		... Zeilen dazwischen ...
        schema_filter: ~^(products|products_attributes|products_options|products_options_values)$~

Oder andersrum nur die Tabellen angeben, die ignoriert werden sollen:

	schema_filter: ~^(?!(campaigns_ip|counter|coupons_description))~
	
Nun die Erzeugung von XML-Dateien in src/AppBundle/Ressources/config/doctrine/ durchführen:

$ php app/console doctrine:mapping:import --force [--em=mysql] [--filter="Meeting"] MyBundle xml

2. Es wurden XML-Dateien erzeugt. Nun durch folgende zwei Zeilen die Entities herstellen:

$ php app/console doctrine:mapping:convert annotation ./src
oder
$ php app/console doctrine:mapping:convert [--em=mysql] --from-database annotation ./src/ShopBundle/Entity

3. Die Entities wurden erzeugt. Nun zum Schluss noch die Getter/Setter erzeugen lassen:

$ php app/console doctrine:generate:entities AppBundle

Entity anlegen oder es sind schon die Entities da und es sollen von Doctrine nur die nötigen Getter/Setter hergestellt werden:

Vorher abchecken, sonst funktioniert es nicht:
- In der Symfony-Datei app/config/config.yml MUSS "auto_mapping: true" für das betroffene ORM im Array "orm" eingestellt sein!!!
- In den Entities muss oben der richtige Namespace stehen, z.B. namespace ShopBundle\Entity;
- --no-backup bedeutet, dass kein Backup mit einer php~ der alten Entity gemacht werden soll:

Befehl für alle Entities in dem Bundle:
$ php app/console doctrine:generate:entities [--no-backup] MyBundle

Befehl für eine Entity im Bundle:
$ php app/console doctrine:generate:entities [--no-backup] MyBundle:Meeting

Es werden nun automatisch die Getter und Setter in die Entity integriert.

