Native-Querys mit dem Native Query-Builder:

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

class NativeSqlController extends Controller
{
    /**
    * @Route("/test/native")
    */
    public function nativeAction()
    {
        $utils = $this->get('utils');
        $debug = $this->get('debug');

        $em = $this->getDoctrine()->getManager();

        $rsm = new ResultSetMappingBuilder($em);

        /**
        * HINWEIS: Es dürfen keine gleichlautenden Felder aus verschiedenen Tabellen benutzt werden. Deshalb MÜSSEN die Queries
        * diese Felder umbenennen, damit sie unique Namen haben. In den $rsm-Funktionen müssen diese Felder aufgeführt werden, 
        * sodass das ResultSetMapping sie dann wieder in die ursprünglichen Feldnamen übersetzt. Im vorliegenden Fall haben die 
        * Tabellen products und productAttributes den gleichen Namen "id" für ihren Primärschlüssel:
        */

        $rsm->addRootEntityFromClassMetadata('AppBundle:Product', 'p', ['id' => 'pid']);
        $rsm->addJoinedEntityFromClassMetadata('AppBundle:ProductAttribute', 'pa', 'p', 'productAttributes',['id' => 'aid']);
        $sql = "
            SELECT p.id as pid, p.model, p.name, pa.id as aid, pa.product_option_id, pa.product_option_value_id
            FROM products p
            LEFT JOIN product_attributes pa ON pa.product_id = p.id
            WHERE p.id >= '1'
            ORDER BY p.id ASC
        ";


        $query = $em->createNativeQuery($sql, $rsm);
        $products = $query->getResult();

        $debug->pr($products, 5);

        return new Response (
            'Controllerausgabe'
        );
    }